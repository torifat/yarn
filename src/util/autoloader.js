/* @flow */
import type {Manifest} from '../types.js';
import {sortAlpha} from '../util/misc.js';
import * as fs from '../util/fs.js';

export default async (patterns: { [packagePattern: string]: Manifest }): Promise<void> => {
  const sortedPatternsKeys: Array<string> = Object.keys(patterns).sort(sortAlpha);
  const val = [];
  const classIncluded = new Set();
  sortedPatternsKeys.forEach((pattern) => {
    const pkg = patterns[pattern];
    // Only handle PS4 for now
    // $FlowFixMe: Move to Manifest class
    if (pkg.autoload && pkg.autoload['psr-4']) {
      const entries = pkg.autoload['psr-4'];
      Object.keys(entries).forEach((klass) => {
        if (!classIncluded.has(klass)) {
          val.push(`\t'${klass.replace(/\\/g, '\\\\')}' => '${pkg.name}/${entries[klass]}',`);
          classIncluded.add(klass);
        }
      });
    }
  });

  const content = [
    '<?php',
    '# THIS IS AN AUTO GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.',
    '$vendors =  array(',
    val.join('\n'),
    ');',
    '\n',
    'function autoload($className) {',
    '\tglobal $vendors;',
    `\t$vendorDir = __DIR__ . DIRECTORY_SEPARATOR;`,
    '\tforeach ($vendors as $prefix => $path) {',
    '\t\tif (strpos($className, $prefix) === 0) {',
    `\t\t$subPath = str_replace('\\\\', '/', substr($className, strlen($prefix)));`,
    '\t\t\trequire_once $vendorDir . $path . DIRECTORY_SEPARATOR . $subPath . \'.php\';',
    '\t\t\tbreak;',
    '\t\t}',
    '\t}',
    '}',
    `spl_autoload_register('autoload');`,
  ].join('\n');

  // FIXME: Hard coded path
  await fs.writeFile('vendor/autoload.php', content);
};
